{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","token","getAll","axios","get","then","response","data","create","newObject","a","config","headers","Authorization","post","res","update","id","put","setToken","newToken","login","credentials","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","username","setUsername","password","setPassword","user","setUser","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","addNote","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","returnedNote","concat","handleLogin","loginService","setItem","stringify","setTimeout","handleNoteChange","target","value","notesToShow","filter","onSubmit","type","name","onChange","map","i","key","find","n","changedNote","catch","error","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7eaf825.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n      </li>\n  )\n}\n\nexport default Note;\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification;","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nlet token = ''\n\nconst setToken = newToken => {\n    token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n    const req = axios.get(baseUrl)\n\n    return req.then(response => response.data)\n    // return req.then(res => res.data)\n}\n\nconst create = async newObject => {\n    const config = {\n        headers: {Authorization: token}\n    }\n    const res = await axios.post(baseUrl, newObject, config)\n    return res.data\n}\n\nconst update = (id, newObject) => {\n    const req = axios.put(`${baseUrl}/${id}`, newObject)\n    return req.then(res => res.data)\n}\n\nexport default {getAll, create, update, setToken}","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const res = await axios.post(baseUrl, credentials)\n  return res.data\n}\n\nexport default {login}","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\nimport loginService from './services/login'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n\n      window.localStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      )\n\n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const loginForm = () => (\n    <form onSubmit={handleLogin}>\n      <div>\n        username\n          <input\n          type=\"text\"\n          value={username}\n          name=\"Username\"\n          onChange={({ target }) => setUsername(target.value)}\n        />\n      </div>\n      <div>\n        password\n          <input\n          type=\"password\"\n          value={password}\n          name=\"Password\"\n          onChange={({ target }) => setPassword(target.value)}\n        />\n      </div>\n      <button type=\"submit\">login</button>\n    </form>\n  )\n\n  const noteForm = () => (\n    <form onSubmit={addNote}>\n      <input\n        value={newNote}\n        onChange={handleNoteChange}\n      />\n      <button type=\"submit\">save</button>\n    </form>\n  )\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n\n      {user === null ?\n        loginForm() :\n        <div>\n          <p>{user.name} logged in</p>\n          {noteForm()}\n        </div>\n      }\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) =>\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}