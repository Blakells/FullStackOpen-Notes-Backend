{"version":3,"sources":["components/Note.js","services/notes.js","components/errorMessage.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","req","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","res","put","Notification","message","length","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","changedNote","returnedNote","catch","err","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mOAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCiB3B,EAtBA,WACX,IAAMK,EAAMC,IAAMC,IAHN,cAINC,EAAc,CAChBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNT,WAAW,GAEZ,OAAOI,EAAIM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAczC,EAVA,SAAAO,GAEX,OADYT,IAAMU,KAfN,aAeoBD,GACrBJ,MAAK,SAAAM,GAAG,OAAIA,EAAIJ,SAQhB,EALA,SAACJ,EAAIM,GAEhB,OADYT,IAAMY,IAAN,UApBA,aAoBA,YAAwBT,GAAMM,GAC/BJ,MAAK,SAAAM,GAAG,OAAIA,EAAIJ,SCRhBM,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAIA,EAAQC,OAAS,EACZ,KAIP,yBAAKnB,UAAU,SACZkB,ICoFQE,EAxFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIuBN,mBAAS,IAJhC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEGtB,MAAK,SAAAuB,GACJT,EAASS,QAEZ,IAEH,IAyCMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAE9B,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcmB,QAASU,IACvB,6BACE,4BAAQ1B,QAAS,kBAAMyB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGO,EAAYE,KAAI,SAACvC,EAAMwC,GAAP,OACf,kBAAC,EAAD,CACAC,IAAKD,EACLxC,KAAMA,EACNC,iBAAkB,kBA1CC,SAACU,GAC1B,IAAMX,EAAO0B,EAAMgB,MAAK,SAAA1C,GAAI,OAAIA,EAAKW,KAAOA,KACtCgC,EAAW,eAAO3C,EAAP,CAAaG,WAAYH,EAAKG,YAE/CgC,EACQxB,EAAIgC,GACX9B,MAAK,SAAA+B,GACJjB,EAASD,EAAMa,KAAI,SAAAvC,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAO4C,SAEpDC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJjC,EAAKK,QADD,0CAGf0C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKW,KAAOA,SA0BdqC,CAAmBhD,EAAKW,WAIpD,0BAAMsC,SA/DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB/C,QAASuB,EACThB,MAAM,IAAIyC,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,GAC3B7C,GAAIe,EAAMH,OAAS,GAGrBY,EACQiB,GACPvC,MAAK,SAAA+B,GACJjB,EAASD,EAAMV,OAAO4B,IACtBf,EAAW,SAmDT,2BACE4B,MAAO7B,EACP8B,SA7BiB,SAACR,GACxBrB,EAAWqB,EAAMS,OAAOF,UA8BpB,4BAAQG,KAAK,UAAb,W,MCnFRC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.cfd4e95c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n      </li>\r\n  )\r\n}\r\n\r\nexport default Note;\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const req = axios.get(baseUrl)\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n      }\r\n       return req.then(response => response.data.concat(nonExisting))\r\n    // return req.then(res => res.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const req = axios.post(baseUrl, newObject)\r\n    return req.then(res => res.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const req = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return req.then(res => res.data)\r\n}\r\n\r\nexport default {getAll, create, update}","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message.length < 1) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className='error'>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification;","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\nimport Notification from './components/errorMessage'\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage]= useState('')\r\n\r\n  useEffect(() => {\r\n    noteService\r\n    .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes)\r\n      })\r\n  }, [])\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n      id: notes.length + 1,\r\n    }\r\n\r\n    noteService\r\n    .create(noteObject)\r\n    .then(returnedNote => {\r\n      setNotes(notes.concat(returnedNote))\r\n      setNewNote('')\r\n    })\r\n  }\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find(note => note.id === id)\r\n    const changedNote = {...note, important: !note.important }\r\n\r\n    noteService\r\n    .update(id, changedNote)\r\n    .then(returnedNote => {\r\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n    })\r\n    .catch(err => {\r\n      setErrorMessage(\r\n        `Note '${note.content}' was already removed from the server`\r\n      )\r\n      setTimeout(() =>{\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n      setNotes(notes.filter(note => note.id !== id))\r\n    })\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important)\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all' }\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note, i) =>\r\n          <Note\r\n          key={i}\r\n          note={note}\r\n          toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input\r\n          value={newNote}\r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}